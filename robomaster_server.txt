def force_import(module):
    __import__ = rm_define.__dict__['__builtins__']['__import__']
    return __import__(module, globals(), locals(), [], 0)

select = force_import('select')
socket = force_import('socket')
struct = force_import('struct')

server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
server_sock.bind(("192.168.2.1", 7860))

# Listen for a connection.
server_sock.listen(1)
print(f"Listening for a connection on 192.168.2.1:7860...")

client_sock = None

while client_sock is None:
    timeout = 0.1
    readable, _, _ = select.select([server_sock], [], [], timeout)

    for s in readable:
        if s is server_sock:
            client_sock, client_endpoint = server_sock.accept()
            print(f"Accepted connection from client @ {client_endpoint}")

#robot_ctrl.set_mode(rm_define.robot_mode_free)
robot_ctrl.set_mode(rm_define.robot_mode_chassis_follow)

msg = ""
while msg != "exit":
    buf = client_sock.recv(struct.calcsize("<i"))
    length = struct.unpack("<i", buf)[0]
    print(length)
    buf = client_sock.recv(length)
    msg = buf.decode("utf-8")
    print(msg)

    tokens = msg.split(" ")
    if tokens[0] == "control":
        chassis_fwd = int(tokens[1])
        gimbal_yaw = int(tokens[2])
        print(chassis_fwd, gimbal_yaw)

        if abs(chassis_fwd) >= 10:
            chassis_ctrl.set_trans_speed(1.0 * abs(chassis_fwd) / 100)
            if chassis_fwd >= 0:
                chassis_ctrl.move(0)
            else:
                chassis_ctrl.move(180)
        else:
            chassis_ctrl.stop()

        gimbal_ctrl.set_rotate_speed(abs(gimbal_yaw))
        if gimbal_yaw >= 0:
            gimbal_ctrl.rotate(rm_define.gimbal_right)
        else:
            gimbal_ctrl.rotate(rm_define.gimbal_left)

server_sock.shutdown(socket.SHUT_RDWR)
server_sock.close()

client_sock.shutdown(socket.SHUT_RDWR)
client_sock.close()
